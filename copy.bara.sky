DESTINATION = folder.destination()

core.workflow(
    name = "oxyplot",
    origin = git.github_origin(
        url = "https://github.com/oxyplot/oxyplot.git",
        ref = "05b527e154e1d5d8deedef634c0bd19c7e742bdc",
    ),
    destination = DESTINATION,
    origin_files = glob(
        [
            "LICENSE",
            "README.md",
            "Source/OxyPlot/**",
            "Source/OxyPlot.Wpf/**",
        ],
        exclude = [
            "**/*.*proj",
            "**/*.*nuspec",
            "**/*.DotSettings",
            "Source/OxyPlot.Wpf/Properties/Resources.*",
            "Source/OxyPlot.Wpf/Properties/Settings.*",
        ],
    ),
    destination_files = glob(
        [
            "third_party/OxyPlot/**",
        ],
        exclude = [
            "third_party/OxyPlot/**/*.*proj",
            "third_party/OxyPlot/*.props",
        ],
    ),
    authoring = authoring.pass_thru("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    transformations = [
        core.replace(
            before = "[assembly: AssemblyTitle(\"${words}\")]",
            after = "",
            regex_groups = {
                "words": "[A-Za-z0-9 ]+",
            },
            paths = glob(["**/AssemblyDescription.cs"]),
        ),
        core.replace(
            before = "[assembly: AssemblyDescription(\"${words}\")]",
            after = "",
            regex_groups = {
                "words": "[A-Za-z0-9 ]+",
            },
            paths = glob(["**/AssemblyDescription.cs"]),
        ),
        core.move("LICENSE", "third_party/OxyPlot/LICENSE"),
        core.move("README.md", "third_party/OxyPlot/README.md"),
        core.move("Source/OxyPlot", "third_party/OxyPlot/OxyPlot"),
        core.move("Source/OxyPlot.Wpf", "third_party/OxyPlot/OxyPlot.Wpf"),
    ],
)

# TODO(zhangshuai.ds): Patch it
# 1. Patch FSharp.Data & FSharp.Data.DesignTime to remove AfterBuild.
# 2. Patch FSharp.Data.DesignTime to use provided FSharp.TypeProviders.SDK.
# 3. Patch FSharp.Data to reference FSharp.Data.DesignTime.
core.workflow(
    name = "fsharp_data",
    origin = git.github_origin(
        url = "https://github.com/fsharp/FSharp.Data.git",
        ref = "e7ad67b48a13934868fd2dc2c2f43aad309a5549",
    ),
    destination = DESTINATION,
    origin_files = glob(
        [
            "LICENSE.md",
            "README.md",
            "src/**",
        ],
        exclude = [
        ],
    ),
    destination_files = glob(
        [
            "third_party/FSharp.Data/**",
        ],
        exclude = [
        ],
    ),
    authoring = authoring.pass_thru("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    transformations = [
        core.move("src", "third_party/FSharp.Data"),
        core.move("LICENSE.md", "third_party/FSharp.Data/LICENSE.md"),
        core.move("README.md", "third_party/FSharp.Data/README.md"),
    ],
)

core.workflow(
    name = "fsharp_typeproviders_sdk",
    origin = git.github_origin(
        url = "https://github.com/fsprojects/FSharp.TypeProviders.SDK.git",
        ref = "b8727a47dd83d3e88aed8f2100f6712478c64632",
    ),
    destination = DESTINATION,
    origin_files = glob(
        [
            "LICENSE.md",
            "README.md",
            "src/**",
        ],
        exclude = [
            "**/*.*proj",
            "**/*.*nuspec",
        ],
    ),
    destination_files = glob(
        [
            "third_party/FSharp.TypeProviders.SDK/**",
        ],
        exclude = [
        ],
    ),
    authoring = authoring.pass_thru("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    transformations = [
        core.move("src", "third_party/FSharp.TypeProviders.SDK"),
        core.move("LICENSE.md", "third_party/FSharp.TypeProviders.SDK/LICENSE.md"),
        core.move("README.md", "third_party/FSharp.TypeProviders.SDK/README.md"),
    ],
)

core.workflow(
    name = "com_github_ejensen_toggle_switch_control",
    origin = git.github_origin(
        url = "https://github.com/ejensen/toggle-switch-control.git",
        ref = "a870f7981c890c62dd8fa3468fa683817a7635e3",
    ),
    destination = DESTINATION,
    origin_files = glob(
        [
            "README.md",
            "Common/**",
            "WPF/**",
        ],
        exclude = [
            "**/*.sln",
        ],
    ),
    destination_files = glob(
        [
            "third_party/ToggleSwitch/**",
        ],
        exclude = [
        ],
    ),
    authoring = authoring.pass_thru("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    transformations = [
        core.move("Common", "third_party/ToggleSwitch/Common"),
        core.move("WPF", "third_party/ToggleSwitch/WPF"),
        core.move("README.md", "third_party/ToggleSwitch/README.md"),
    ],
)

# TODO(zhangshuai.ustc): Add https://github.com/fallin/Itc4net/tree/master/src/Itc4net
# and then fix Clocks.IntervalTreeClocks

# third_party/CRC32.NET/native folder is from https://cdn.machinezoo.com/download/crc32c/crc32c-hw-1.0.5.7z
core.workflow(
    name = "com_github_zeldafreak_crc32c_net",
    origin = git.github_origin(
        url = "https://github.com/zeldafreak/CRC32C.NET.git",
        ref = "445adbcc5dabcaf6592d94459879d80cf40a4f8e",
    ),
    destination = DESTINATION,
    origin_files = glob(
        [
            "README.md",
            "LICENSE",
            "Crc32C.NET/**",
        ],
        exclude = [
            "Crc32C.NET/Properties/**",
            "**/*.csproj",
            "**/*.nuspec",
        ],
    ),
    destination_files = glob(
        [
            "third_party/CRC32.NET/Crc32C.NET/**",
            "third_party/CRC32.NET/LICENSE",
            "third_party/CRC32.NET/README.md",
        ],
        exclude = [
            "**/*.csproj",
        ],
    ),
    authoring = authoring.pass_thru("Shuai Zhang <zhangshuai.ustc@gmail.com>"),
    transformations = [
        core.move("Crc32C.NET", "third_party/CRC32.NET/Crc32C.NET"),
        core.move("LICENSE", "third_party/CRC32.NET/LICENSE"),
        core.move("README.md", "third_party/CRC32.NET/README.md"),
    ],
)
